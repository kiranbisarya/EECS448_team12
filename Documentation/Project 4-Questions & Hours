• System Documentation (35%) Estimate of person-hours for completing the project (5%)
Using the Agile user story method, we all came together and talked about the estimated cost of each task based on how long tasks from previous projects 1, 2, and 3 took us and averaged the cost each of us thought for each task. Therefore, we estimate the remaining tasks left from project 3 will be three hours for finishing up all debugging and making the gameOver detection for each way to win finished, two hours for detecting a tie function(no win with all slots full) to be checked in the gameOver function, and two hour to get the reset button to reset the board when clicked. We estimate answering each one of the questions will take 1 hour maximum and the video will take one hour to plan and 10 minutes to film. We estimate adding everything to the GitHub and exporting the video to take 30 minutes. We estimate the test suite will take 4 hours for us to plan and execute. This all adds up to a total of 13 hours and 40 minutes of estimated person-hours to finish project 4.

• Actual accounting of the person-hours required to complete the project (5%) From 11/1 onwards
11/1, Katie working on this document and several questions, 1 hour
11/1, Nina researching costs for deployment plan, sources at the end of doc, 1 hour
11/1 Katie working on questions more, 30 minutes
11/2 Kiran working on fixing win functions, 30 min
11/2 Katie working on turn fixing and sound effects and reset button, 40 mins
11/2 Kiran working on checking if column is full and for a tie, 20 min
11/2 Nina working on video product description, 15 minutes
11/2 Nina working on fixing reset board bug + code clean up, 45 minutes
11/3 Nina working on unit testing planning + starting test 01 and test02, 40 min
11/5 Nina working on unit testing test02 + set up rest of other tests, 1 hour
11/6 Nina completing all tests except for test02 and test01, 1 hour
11/7 Nina completed all unit tests, 45 min
11/7 Katie adding to GitHub and adding comments to code, 30 minutes
11/7 Quchang fixing bugs, 20 min
11/8 Katie fixing bugs, 30 minutes
11/8 Quchang editing html and css files, 45 min

• Use a defect tracking tool to manage software defects in your project (5%) From 11/1 onwards
11/1 one bug is game not tracking wins in gameOver() function for player one, reported by Katie resolved by Kiran 11/2 by fixing win functions
11/1 since gameOver() function not always working, is affecting endTurn() function from working correctly, reported by Katie resolved by Kiran 11/2 by fixing win functions
11/1 line 195 bug -- possible issues with checkForVertWin function, reported by Nina resolved by Nina: placed 4 chips in a vertical position instead of 5, also fixed the text to check for e specific win at a specific location instead of running the whole board.
11/3 Unit test: test02_updateBoard() -- trying to get all cases of no player selection, player 1 selection and player 2 selection, but only getting no player selection, reported by Nina resolved by Nina: placed test row & col in the proper place the tests would expect them in.
11/6, Unit test 01 and 02 have “Game.js:74 Uncaught TypeError: Cannot read property '0' of undefined”, reported by Nina -- resolved by Nina: returning the value that is supposed to be marked for player 1 or 2 and making sure that the test points were in the proper rows & cols.
11/8, Turn count not correct when a user has won and turn count not reset properly on a board reset, reported by Katie resolved by Katie by restoring turn count code to the correct way it was before with only being updated when the game is not over and being initialized to 0 in board reset func, added variable to only allow turn count to increase when column not full

• Describe how your team integrated code from the team members. Which Integration Strategy do you think your team used? Explain why. (250-350 words – 5%)
The way we integrated our code was by having we each had our own branches and the main branch on our GitHub repo. We each worked on our own branch of our name with that branch checked out only so that we would not mess up the main branch if we made things worse while trying to make our project. That way, the main branch was always in good working order so we could all work on it at the same time. We only pushed when our code was working well and good progress had been made and we made sure to push with descriptive commit comments on what had been changed. When we were ready to push, we would create a pull request on the repo and have our branch compared with the main branch, and if it was compatible then we would push it onto the main branch. Therefore, because of the two branch aka two group comparison I think this is sandwich integration. I think it’s sandwich integration because the two branches are compared and then after there are no conflicts or the conflicts are fixed, it is then integrated. As stated in the sandwich integration lectures slides, one of the major strengths is all of the major faults will show up and be fixed early because it will not allow the code to be merged if the new branch code is not compatible with the main branch. Additionally, there is indeed fault isolation because GitHub will tell you which section of the code you’re comparing is creating merging issues which is fantastic because then you know what exactly you need to fix before you can push onto the main branch.

• Deployment plan (500-700 words - 5%)  
The steps required to deploy this project onto the web would be to buy a website domain name and then to upload it onto that website. The steps to put it on the app store would be to create it in Unity and then deploy it onto the app store, which costs $99 a year. The steps to put it onto the Playstation and XBox is free, however to deploy a game onto Xbox Live, it will require an Xbox Live Creator account. For these accounts, the cost for an individual developer would be $19 and an account for a company, it would be $99. The next step to take would just be to recreate the game in Unity using the same code and then to export the game correctly for the desired platform. To create the game in Unity, one could use free game art from a website, or one could pay an artist on commission for the board and piece. If an artist were to be commissioned, this would likely cost somewhere around $50. According to polygon.com, the cost to publish a game on Steam will cost the developer a $100 one-time fee (this will also allow the developer to continue uploading an unlimited number of games). The potential market for this game would be everyone, just like the physical game is, as it is a simple game with rules that are easy to understand and family friendly. If we were to deploy the game on an online platform, the only costs associated would just be a possible developer account fee and the fee for uploading a single game -- however these rates may vary from platform to platform (as mentioned previously). The costs associated for creating physical copies of the game would range from $0.50-$3 per copy (smallbusiness.costhelper.com). The larger the quantity, the cheaper the price will be for the production of the game discs. According to ProAction Media, a bundle of 2000 CDs will cost $1.39 for each CD. Another option that will be more cost efficient will be from QuickTurn, which advertises a cost of $0.62 per disk for a 20,000 copy bundle. Ground shipping costs from the manufacturing site to stores vary from location to location, but the estimated costs will range from an additional $10-15 (100 copies) t0 $50-$130 (1000 copies). The costs associated with buying a domain and hosting our game would also depend on the TLD (top-level domain) name. For example, a domain with the name “connect4game.net” would cost $12.99 per year (domain.com, domain search), whereas a domain with the name “connect4game.space” would cost $2.99 per year. If we are wanting to showcase our game at an event such as GDC (Game Developers Conference), a booth will cost $300. However, if we are wanting to showcase our game to the PAX East and West conference, a 10x10 booth will cost $2,500-$5,000 depending on set up/materials needed (2 days). 

• Maintenance plan (500-700 words - 5%)
The cost for maintaining this product for the next year is fairly low. The game is completed so there is no need to hire developers. However, if one wanted to make the game into a playable game on a console, you could hire a few developers to continue working on it in something like Unity that could then be run on a console as well and to add a fun main screen and animations. They could also add a pvp option and play vs AI option. They could add three different AI options, easy, medium, and hard. The easy option would be random guessing, the medium option would be the AI trying decently hard to win and only blocking the player when the player is about to win, and the hard option would be the AI going for a win hardcore and actively blocking the other player from winning. The hard mode would also have some strategy in it for winning a connect four game. If we wanted to user test this to see if the levels are sufficiently easy, medium, and hard, we could pay students on campus $10 each for their time to get feedback. If we did this, we would probably want at least 10 students, so that’s $100 total and this area would not need maintenance unless we got feedback after deployment that the level difficulty is off. If the level difficulty was off, then we would need to hire developers to come back and redo the three difficulty coding and we would probably pay more students of different connect four experiences to test the game again. Additionally, an artist could be hired to create game art which would likely cost around $50 for the board and pieces and as long as the graphics are good, there shouldn’t need to be any maintenance on that. The same goes for sound effects and background music for the game, you could either hire a musician or pay a website to use their music. This would likely cost either a one time fee of around $50 for hiring a student of a yearly subscription cost if it was a website. This would probably take two decently experienced programmers around 10 hours each working together, so if you paid them both $20 an hour that would be $400. If you wanted to put the game onto the app store, that would be $99 a year. The cost to put it onto the Playstation and XBox is free, however to deploy a game onto Xbox Live, it will require an Xbox Live Creator account. For these accounts, the cost for an individual developer would be $19 and an account for a company, it would be $99. However, if you put it onto Steam, a popular way to download and play PC games, it would cost a $100 one time fee and they would take 30% of everything you make if you charge for it. Another cost could be the cost of buying a website name to host the playable game each month. One the project is out however, there is not a lot of maintenance that would need to be done, it is a fairly simple game that would hold up well for many years. The only maintenance would be to make sure the yearly fees of keeping it up on a website, console store, and if a website is being paid for music usage are being paid on time. 
	
• Sources: 
CD & DVD Costs for small businesses:
https://smallbusiness.costhelper.com/cd-dvd-packaging.html
Domain.com, domain costs: (type in “connect4game” to find costs in search engine)
https://www.domain.com/registration?flow=domainDFE&search=connect4#/domainDFE/1
Cost of convention/conference booth:
https://indiemegabooth.com/about/submissions/#:~:text=GDC%3A%20%24300%20for%20the%20Shared,setup%2C%20merchandise%20and%20other%20expenses. 
